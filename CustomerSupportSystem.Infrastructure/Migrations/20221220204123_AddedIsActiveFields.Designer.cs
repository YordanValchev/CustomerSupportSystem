// <auto-generated />
using System;
using CustomerSupportSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerSupportSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221220204123_AddedIsActiveFields")]
    partial class AddedIsActiveFields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c80cb755-6247-4474-aa26-43a41d78691a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b045e6d2-b4ea-4823-badc-c6401ec9b6b7",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEN2azEwMhoBG8EZ942hlo3q+agABmfm0DkbZ9GEb7KB21odoNM2tz7jw8/WDJPAHCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8ced16e-6f1f-466f-8140-cf15be625f59",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IsoAlfa2Code")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("IsoAlfa3Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("IsoNumericCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsoAlfa2Code = "AF",
                            IsoAlfa3Code = "AFG",
                            IsoNumericCode = 4,
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 2,
                            IsoAlfa2Code = "AL",
                            IsoAlfa3Code = "ALB",
                            IsoNumericCode = 8,
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 3,
                            IsoAlfa2Code = "AQ",
                            IsoAlfa3Code = "ATA",
                            IsoNumericCode = 10,
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = 4,
                            IsoAlfa2Code = "DZ",
                            IsoAlfa3Code = "DZA",
                            IsoNumericCode = 12,
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 5,
                            IsoAlfa2Code = "AS",
                            IsoAlfa3Code = "ASM",
                            IsoNumericCode = 16,
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 6,
                            IsoAlfa2Code = "AD",
                            IsoAlfa3Code = "AND",
                            IsoNumericCode = 20,
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 7,
                            IsoAlfa2Code = "AO",
                            IsoAlfa3Code = "AGO",
                            IsoNumericCode = 24,
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 8,
                            IsoAlfa2Code = "AG",
                            IsoAlfa3Code = "ATG",
                            IsoNumericCode = 28,
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 9,
                            IsoAlfa2Code = "AZ",
                            IsoAlfa3Code = "AZE",
                            IsoNumericCode = 31,
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 10,
                            IsoAlfa2Code = "AR",
                            IsoAlfa3Code = "ARG",
                            IsoNumericCode = 32,
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 11,
                            IsoAlfa2Code = "AU",
                            IsoAlfa3Code = "AUS",
                            IsoNumericCode = 36,
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 12,
                            IsoAlfa2Code = "AT",
                            IsoAlfa3Code = "AUT",
                            IsoNumericCode = 40,
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 13,
                            IsoAlfa2Code = "BS",
                            IsoAlfa3Code = "BHS",
                            IsoNumericCode = 44,
                            Name = "Bahamas (the)"
                        },
                        new
                        {
                            Id = 14,
                            IsoAlfa2Code = "BH",
                            IsoAlfa3Code = "BHR",
                            IsoNumericCode = 48,
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 15,
                            IsoAlfa2Code = "BD",
                            IsoAlfa3Code = "BGD",
                            IsoNumericCode = 50,
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 16,
                            IsoAlfa2Code = "AM",
                            IsoAlfa3Code = "ARM",
                            IsoNumericCode = 51,
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 17,
                            IsoAlfa2Code = "BB",
                            IsoAlfa3Code = "BRB",
                            IsoNumericCode = 52,
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 18,
                            IsoAlfa2Code = "BE",
                            IsoAlfa3Code = "BEL",
                            IsoNumericCode = 56,
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 19,
                            IsoAlfa2Code = "BM",
                            IsoAlfa3Code = "BMU",
                            IsoNumericCode = 60,
                            Name = "Bermuda"
                        },
                        new
                        {
                            Id = 20,
                            IsoAlfa2Code = "BT",
                            IsoAlfa3Code = "BTN",
                            IsoNumericCode = 64,
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 21,
                            IsoAlfa2Code = "BO",
                            IsoAlfa3Code = "BOL",
                            IsoNumericCode = 68,
                            Name = "Bolivia (Plurinational State of)"
                        },
                        new
                        {
                            Id = 22,
                            IsoAlfa2Code = "BA",
                            IsoAlfa3Code = "BIH",
                            IsoNumericCode = 70,
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 23,
                            IsoAlfa2Code = "BW",
                            IsoAlfa3Code = "BWA",
                            IsoNumericCode = 72,
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 24,
                            IsoAlfa2Code = "BV",
                            IsoAlfa3Code = "BVT",
                            IsoNumericCode = 74,
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            Id = 25,
                            IsoAlfa2Code = "BR",
                            IsoAlfa3Code = "BRA",
                            IsoNumericCode = 76,
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 26,
                            IsoAlfa2Code = "BZ",
                            IsoAlfa3Code = "BLZ",
                            IsoNumericCode = 84,
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 27,
                            IsoAlfa2Code = "IO",
                            IsoAlfa3Code = "IOT",
                            IsoNumericCode = 86,
                            Name = "British Indian Ocean Territory (the)"
                        },
                        new
                        {
                            Id = 28,
                            IsoAlfa2Code = "SB",
                            IsoAlfa3Code = "SLB",
                            IsoNumericCode = 90,
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 29,
                            IsoAlfa2Code = "VG",
                            IsoAlfa3Code = "VGB",
                            IsoNumericCode = 92,
                            Name = "Virgin Islands (British)"
                        },
                        new
                        {
                            Id = 30,
                            IsoAlfa2Code = "BN",
                            IsoAlfa3Code = "BRN",
                            IsoNumericCode = 96,
                            Name = "Brunei Darussalam"
                        },
                        new
                        {
                            Id = 31,
                            IsoAlfa2Code = "BG",
                            IsoAlfa3Code = "BGR",
                            IsoNumericCode = 100,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 32,
                            IsoAlfa2Code = "MM",
                            IsoAlfa3Code = "MMR",
                            IsoNumericCode = 104,
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 33,
                            IsoAlfa2Code = "BI",
                            IsoAlfa3Code = "BDI",
                            IsoNumericCode = 108,
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 34,
                            IsoAlfa2Code = "BY",
                            IsoAlfa3Code = "BLR",
                            IsoNumericCode = 112,
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 35,
                            IsoAlfa2Code = "KH",
                            IsoAlfa3Code = "KHM",
                            IsoNumericCode = 116,
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 36,
                            IsoAlfa2Code = "CM",
                            IsoAlfa3Code = "CMR",
                            IsoNumericCode = 120,
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 37,
                            IsoAlfa2Code = "CA",
                            IsoAlfa3Code = "CAN",
                            IsoNumericCode = 124,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 38,
                            IsoAlfa2Code = "CV",
                            IsoAlfa3Code = "CPV",
                            IsoNumericCode = 132,
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Id = 39,
                            IsoAlfa2Code = "KY",
                            IsoAlfa3Code = "CYM",
                            IsoNumericCode = 136,
                            Name = "Cayman Islands (the)"
                        },
                        new
                        {
                            Id = 40,
                            IsoAlfa2Code = "CF",
                            IsoAlfa3Code = "CAF",
                            IsoNumericCode = 140,
                            Name = "Central African Republic (the)"
                        },
                        new
                        {
                            Id = 41,
                            IsoAlfa2Code = "LK",
                            IsoAlfa3Code = "LKA",
                            IsoNumericCode = 144,
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 42,
                            IsoAlfa2Code = "TD",
                            IsoAlfa3Code = "TCD",
                            IsoNumericCode = 148,
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 43,
                            IsoAlfa2Code = "CL",
                            IsoAlfa3Code = "CHL",
                            IsoNumericCode = 152,
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 44,
                            IsoAlfa2Code = "CN",
                            IsoAlfa3Code = "CHN",
                            IsoNumericCode = 156,
                            Name = "China"
                        },
                        new
                        {
                            Id = 45,
                            IsoAlfa2Code = "TW",
                            IsoAlfa3Code = "TWN",
                            IsoNumericCode = 158,
                            Name = "Taiwan (Province of China)"
                        },
                        new
                        {
                            Id = 46,
                            IsoAlfa2Code = "CX",
                            IsoAlfa3Code = "CXR",
                            IsoNumericCode = 162,
                            Name = "Christmas Island"
                        },
                        new
                        {
                            Id = 47,
                            IsoAlfa2Code = "CC",
                            IsoAlfa3Code = "CCK",
                            IsoNumericCode = 166,
                            Name = "Cocos (Keeling) Islands (the)"
                        },
                        new
                        {
                            Id = 48,
                            IsoAlfa2Code = "CO",
                            IsoAlfa3Code = "COL",
                            IsoNumericCode = 170,
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 49,
                            IsoAlfa2Code = "KM",
                            IsoAlfa3Code = "COM",
                            IsoNumericCode = 174,
                            Name = "Comoros (the)"
                        },
                        new
                        {
                            Id = 50,
                            IsoAlfa2Code = "YT",
                            IsoAlfa3Code = "MYT",
                            IsoNumericCode = 175,
                            Name = "Mayotte"
                        },
                        new
                        {
                            Id = 51,
                            IsoAlfa2Code = "CG",
                            IsoAlfa3Code = "COG",
                            IsoNumericCode = 178,
                            Name = "Congo (the)"
                        },
                        new
                        {
                            Id = 52,
                            IsoAlfa2Code = "CD",
                            IsoAlfa3Code = "COD",
                            IsoNumericCode = 180,
                            Name = "Congo (the Democratic Republic of the)"
                        },
                        new
                        {
                            Id = 53,
                            IsoAlfa2Code = "CK",
                            IsoAlfa3Code = "COK",
                            IsoNumericCode = 184,
                            Name = "Cook Islands (the)"
                        },
                        new
                        {
                            Id = 54,
                            IsoAlfa2Code = "CR",
                            IsoAlfa3Code = "CRI",
                            IsoNumericCode = 188,
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 55,
                            IsoAlfa2Code = "HR",
                            IsoAlfa3Code = "HRV",
                            IsoNumericCode = 191,
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 56,
                            IsoAlfa2Code = "CU",
                            IsoAlfa3Code = "CUB",
                            IsoNumericCode = 192,
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 57,
                            IsoAlfa2Code = "CY",
                            IsoAlfa3Code = "CYP",
                            IsoNumericCode = 196,
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 58,
                            IsoAlfa2Code = "CZ",
                            IsoAlfa3Code = "CZE",
                            IsoNumericCode = 203,
                            Name = "Czechia"
                        },
                        new
                        {
                            Id = 59,
                            IsoAlfa2Code = "BJ",
                            IsoAlfa3Code = "BEN",
                            IsoNumericCode = 204,
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 60,
                            IsoAlfa2Code = "DK",
                            IsoAlfa3Code = "DNK",
                            IsoNumericCode = 208,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 61,
                            IsoAlfa2Code = "DM",
                            IsoAlfa3Code = "DMA",
                            IsoNumericCode = 212,
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 62,
                            IsoAlfa2Code = "DO",
                            IsoAlfa3Code = "DOM",
                            IsoNumericCode = 214,
                            Name = "Dominican Republic (the)"
                        },
                        new
                        {
                            Id = 63,
                            IsoAlfa2Code = "EC",
                            IsoAlfa3Code = "ECU",
                            IsoNumericCode = 218,
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 64,
                            IsoAlfa2Code = "SV",
                            IsoAlfa3Code = "SLV",
                            IsoNumericCode = 222,
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 65,
                            IsoAlfa2Code = "GQ",
                            IsoAlfa3Code = "GNQ",
                            IsoNumericCode = 226,
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 66,
                            IsoAlfa2Code = "ET",
                            IsoAlfa3Code = "ETH",
                            IsoNumericCode = 231,
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 67,
                            IsoAlfa2Code = "ER",
                            IsoAlfa3Code = "ERI",
                            IsoNumericCode = 232,
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 68,
                            IsoAlfa2Code = "EE",
                            IsoAlfa3Code = "EST",
                            IsoNumericCode = 233,
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 69,
                            IsoAlfa2Code = "FO",
                            IsoAlfa3Code = "FRO",
                            IsoNumericCode = 234,
                            Name = "Faroe Islands (the)"
                        },
                        new
                        {
                            Id = 70,
                            IsoAlfa2Code = "FK",
                            IsoAlfa3Code = "FLK",
                            IsoNumericCode = 238,
                            Name = "Falkland Islands (the) [Malvinas]"
                        },
                        new
                        {
                            Id = 71,
                            IsoAlfa2Code = "GS",
                            IsoAlfa3Code = "SGS",
                            IsoNumericCode = 239,
                            Name = "South Georgia and the South Sandwich Islands"
                        },
                        new
                        {
                            Id = 72,
                            IsoAlfa2Code = "FJ",
                            IsoAlfa3Code = "FJI",
                            IsoNumericCode = 242,
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = 73,
                            IsoAlfa2Code = "FI",
                            IsoAlfa3Code = "FIN",
                            IsoNumericCode = 246,
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 74,
                            IsoAlfa2Code = "AX",
                            IsoAlfa3Code = "ALA",
                            IsoNumericCode = 248,
                            Name = "Åland Islands"
                        },
                        new
                        {
                            Id = 75,
                            IsoAlfa2Code = "FR",
                            IsoAlfa3Code = "FRA",
                            IsoNumericCode = 250,
                            Name = "France"
                        },
                        new
                        {
                            Id = 76,
                            IsoAlfa2Code = "GF",
                            IsoAlfa3Code = "GUF",
                            IsoNumericCode = 254,
                            Name = "French Guiana"
                        },
                        new
                        {
                            Id = 77,
                            IsoAlfa2Code = "PF",
                            IsoAlfa3Code = "PYF",
                            IsoNumericCode = 258,
                            Name = "French Polynesia"
                        },
                        new
                        {
                            Id = 78,
                            IsoAlfa2Code = "TF",
                            IsoAlfa3Code = "ATF",
                            IsoNumericCode = 260,
                            Name = "French Southern Territories (the)"
                        },
                        new
                        {
                            Id = 79,
                            IsoAlfa2Code = "DJ",
                            IsoAlfa3Code = "DJI",
                            IsoNumericCode = 262,
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 80,
                            IsoAlfa2Code = "GA",
                            IsoAlfa3Code = "GAB",
                            IsoNumericCode = 266,
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 81,
                            IsoAlfa2Code = "GE",
                            IsoAlfa3Code = "GEO",
                            IsoNumericCode = 268,
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 82,
                            IsoAlfa2Code = "GM",
                            IsoAlfa3Code = "GMB",
                            IsoNumericCode = 270,
                            Name = "Gambia (the)"
                        },
                        new
                        {
                            Id = 83,
                            IsoAlfa2Code = "PS",
                            IsoAlfa3Code = "PSE",
                            IsoNumericCode = 275,
                            Name = "Palestine, State of"
                        },
                        new
                        {
                            Id = 84,
                            IsoAlfa2Code = "DE",
                            IsoAlfa3Code = "DEU",
                            IsoNumericCode = 276,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 85,
                            IsoAlfa2Code = "GH",
                            IsoAlfa3Code = "GHA",
                            IsoNumericCode = 288,
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 86,
                            IsoAlfa2Code = "GI",
                            IsoAlfa3Code = "GIB",
                            IsoNumericCode = 292,
                            Name = "Gibraltar"
                        },
                        new
                        {
                            Id = 87,
                            IsoAlfa2Code = "KI",
                            IsoAlfa3Code = "KIR",
                            IsoNumericCode = 296,
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 88,
                            IsoAlfa2Code = "GR",
                            IsoAlfa3Code = "GRC",
                            IsoNumericCode = 300,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 89,
                            IsoAlfa2Code = "GL",
                            IsoAlfa3Code = "GRL",
                            IsoNumericCode = 304,
                            Name = "Greenland"
                        },
                        new
                        {
                            Id = 90,
                            IsoAlfa2Code = "GD",
                            IsoAlfa3Code = "GRD",
                            IsoNumericCode = 308,
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 91,
                            IsoAlfa2Code = "GP",
                            IsoAlfa3Code = "GLP",
                            IsoNumericCode = 312,
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            Id = 92,
                            IsoAlfa2Code = "GU",
                            IsoAlfa3Code = "GUM",
                            IsoNumericCode = 316,
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 93,
                            IsoAlfa2Code = "GT",
                            IsoAlfa3Code = "GTM",
                            IsoNumericCode = 320,
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 94,
                            IsoAlfa2Code = "GN",
                            IsoAlfa3Code = "GIN",
                            IsoNumericCode = 324,
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 95,
                            IsoAlfa2Code = "GY",
                            IsoAlfa3Code = "GUY",
                            IsoNumericCode = 328,
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 96,
                            IsoAlfa2Code = "HT",
                            IsoAlfa3Code = "HTI",
                            IsoNumericCode = 332,
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 97,
                            IsoAlfa2Code = "HM",
                            IsoAlfa3Code = "HMD",
                            IsoNumericCode = 334,
                            Name = "Heard Island and McDonald Islands"
                        },
                        new
                        {
                            Id = 98,
                            IsoAlfa2Code = "VA",
                            IsoAlfa3Code = "VAT",
                            IsoNumericCode = 336,
                            Name = "Holy See (the)"
                        },
                        new
                        {
                            Id = 99,
                            IsoAlfa2Code = "HN",
                            IsoAlfa3Code = "HND",
                            IsoNumericCode = 340,
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 100,
                            IsoAlfa2Code = "HK",
                            IsoAlfa3Code = "HKG",
                            IsoNumericCode = 344,
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = 101,
                            IsoAlfa2Code = "HU",
                            IsoAlfa3Code = "HUN",
                            IsoNumericCode = 348,
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 102,
                            IsoAlfa2Code = "IS",
                            IsoAlfa3Code = "ISL",
                            IsoNumericCode = 352,
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 103,
                            IsoAlfa2Code = "IN",
                            IsoAlfa3Code = "IND",
                            IsoNumericCode = 356,
                            Name = "India"
                        },
                        new
                        {
                            Id = 104,
                            IsoAlfa2Code = "ID",
                            IsoAlfa3Code = "IDN",
                            IsoNumericCode = 360,
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 105,
                            IsoAlfa2Code = "IR",
                            IsoAlfa3Code = "IRN",
                            IsoNumericCode = 364,
                            Name = "Iran (Islamic Republic of)"
                        },
                        new
                        {
                            Id = 106,
                            IsoAlfa2Code = "IQ",
                            IsoAlfa3Code = "IRQ",
                            IsoNumericCode = 368,
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 107,
                            IsoAlfa2Code = "IE",
                            IsoAlfa3Code = "IRL",
                            IsoNumericCode = 372,
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 108,
                            IsoAlfa2Code = "IL",
                            IsoAlfa3Code = "ISR",
                            IsoNumericCode = 376,
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 109,
                            IsoAlfa2Code = "IT",
                            IsoAlfa3Code = "ITA",
                            IsoNumericCode = 380,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 110,
                            IsoAlfa2Code = "CI",
                            IsoAlfa3Code = "CIV",
                            IsoNumericCode = 384,
                            Name = "Côte d'Ivoire"
                        },
                        new
                        {
                            Id = 111,
                            IsoAlfa2Code = "JM",
                            IsoAlfa3Code = "JAM",
                            IsoNumericCode = 388,
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 112,
                            IsoAlfa2Code = "JP",
                            IsoAlfa3Code = "JPN",
                            IsoNumericCode = 392,
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 113,
                            IsoAlfa2Code = "KZ",
                            IsoAlfa3Code = "KAZ",
                            IsoNumericCode = 398,
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 114,
                            IsoAlfa2Code = "JO",
                            IsoAlfa3Code = "JOR",
                            IsoNumericCode = 400,
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 115,
                            IsoAlfa2Code = "KE",
                            IsoAlfa3Code = "KEN",
                            IsoNumericCode = 404,
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 116,
                            IsoAlfa2Code = "KP",
                            IsoAlfa3Code = "PRK",
                            IsoNumericCode = 408,
                            Name = "Korea (the Democratic People's Republic of)"
                        },
                        new
                        {
                            Id = 117,
                            IsoAlfa2Code = "KR",
                            IsoAlfa3Code = "KOR",
                            IsoNumericCode = 410,
                            Name = "Korea (the Republic of)"
                        },
                        new
                        {
                            Id = 118,
                            IsoAlfa2Code = "KW",
                            IsoAlfa3Code = "KWT",
                            IsoNumericCode = 414,
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 119,
                            IsoAlfa2Code = "KG",
                            IsoAlfa3Code = "KGZ",
                            IsoNumericCode = 417,
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 120,
                            IsoAlfa2Code = "LA",
                            IsoAlfa3Code = "LAO",
                            IsoNumericCode = 418,
                            Name = "Lao People's Democratic Republic (the)"
                        },
                        new
                        {
                            Id = 121,
                            IsoAlfa2Code = "LB",
                            IsoAlfa3Code = "LBN",
                            IsoNumericCode = 422,
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 122,
                            IsoAlfa2Code = "LS",
                            IsoAlfa3Code = "LSO",
                            IsoNumericCode = 426,
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 123,
                            IsoAlfa2Code = "LV",
                            IsoAlfa3Code = "LVA",
                            IsoNumericCode = 428,
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 124,
                            IsoAlfa2Code = "LR",
                            IsoAlfa3Code = "LBR",
                            IsoNumericCode = 430,
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 125,
                            IsoAlfa2Code = "LY",
                            IsoAlfa3Code = "LBY",
                            IsoNumericCode = 434,
                            Name = "Libya"
                        },
                        new
                        {
                            Id = 126,
                            IsoAlfa2Code = "LI",
                            IsoAlfa3Code = "LIE",
                            IsoNumericCode = 438,
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 127,
                            IsoAlfa2Code = "LT",
                            IsoAlfa3Code = "LTU",
                            IsoNumericCode = 440,
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 128,
                            IsoAlfa2Code = "LU",
                            IsoAlfa3Code = "LUX",
                            IsoNumericCode = 442,
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 129,
                            IsoAlfa2Code = "MO",
                            IsoAlfa3Code = "MAC",
                            IsoNumericCode = 446,
                            Name = "Macao"
                        },
                        new
                        {
                            Id = 130,
                            IsoAlfa2Code = "MG",
                            IsoAlfa3Code = "MDG",
                            IsoNumericCode = 450,
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 131,
                            IsoAlfa2Code = "MW",
                            IsoAlfa3Code = "MWI",
                            IsoNumericCode = 454,
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 132,
                            IsoAlfa2Code = "MY",
                            IsoAlfa3Code = "MYS",
                            IsoNumericCode = 458,
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 133,
                            IsoAlfa2Code = "MV",
                            IsoAlfa3Code = "MDV",
                            IsoNumericCode = 462,
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 134,
                            IsoAlfa2Code = "ML",
                            IsoAlfa3Code = "MLI",
                            IsoNumericCode = 466,
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 135,
                            IsoAlfa2Code = "MT",
                            IsoAlfa3Code = "MLT",
                            IsoNumericCode = 470,
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 136,
                            IsoAlfa2Code = "MQ",
                            IsoAlfa3Code = "MTQ",
                            IsoNumericCode = 474,
                            Name = "Martinique"
                        },
                        new
                        {
                            Id = 137,
                            IsoAlfa2Code = "MR",
                            IsoAlfa3Code = "MRT",
                            IsoNumericCode = 478,
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 138,
                            IsoAlfa2Code = "MU",
                            IsoAlfa3Code = "MUS",
                            IsoNumericCode = 480,
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 139,
                            IsoAlfa2Code = "MX",
                            IsoAlfa3Code = "MEX",
                            IsoNumericCode = 484,
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 140,
                            IsoAlfa2Code = "MC",
                            IsoAlfa3Code = "MCO",
                            IsoNumericCode = 492,
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 141,
                            IsoAlfa2Code = "MN",
                            IsoAlfa3Code = "MNG",
                            IsoNumericCode = 496,
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 142,
                            IsoAlfa2Code = "MD",
                            IsoAlfa3Code = "MDA",
                            IsoNumericCode = 498,
                            Name = "Moldova (the Republic of)"
                        },
                        new
                        {
                            Id = 143,
                            IsoAlfa2Code = "ME",
                            IsoAlfa3Code = "MNE",
                            IsoNumericCode = 499,
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 144,
                            IsoAlfa2Code = "MS",
                            IsoAlfa3Code = "MSR",
                            IsoNumericCode = 500,
                            Name = "Montserrat"
                        },
                        new
                        {
                            Id = 145,
                            IsoAlfa2Code = "MA",
                            IsoAlfa3Code = "MAR",
                            IsoNumericCode = 504,
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 146,
                            IsoAlfa2Code = "MZ",
                            IsoAlfa3Code = "MOZ",
                            IsoNumericCode = 508,
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 147,
                            IsoAlfa2Code = "OM",
                            IsoAlfa3Code = "OMN",
                            IsoNumericCode = 512,
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 148,
                            IsoAlfa2Code = "NA",
                            IsoAlfa3Code = "NAM",
                            IsoNumericCode = 516,
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 149,
                            IsoAlfa2Code = "NR",
                            IsoAlfa3Code = "NRU",
                            IsoNumericCode = 520,
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 150,
                            IsoAlfa2Code = "NP",
                            IsoAlfa3Code = "NPL",
                            IsoNumericCode = 524,
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 151,
                            IsoAlfa2Code = "NL",
                            IsoAlfa3Code = "NLD",
                            IsoNumericCode = 528,
                            Name = "Netherlands (the)"
                        },
                        new
                        {
                            Id = 152,
                            IsoAlfa2Code = "CW",
                            IsoAlfa3Code = "CUW",
                            IsoNumericCode = 531,
                            Name = "Curaçao"
                        },
                        new
                        {
                            Id = 153,
                            IsoAlfa2Code = "AW",
                            IsoAlfa3Code = "ABW",
                            IsoNumericCode = 533,
                            Name = "Aruba"
                        },
                        new
                        {
                            Id = 154,
                            IsoAlfa2Code = "SX",
                            IsoAlfa3Code = "SXM",
                            IsoNumericCode = 534,
                            Name = "Sint Maarten (Dutch part)"
                        },
                        new
                        {
                            Id = 155,
                            IsoAlfa2Code = "BQ",
                            IsoAlfa3Code = "BES",
                            IsoNumericCode = 535,
                            Name = "Bonaire, Sint Eustatius and Saba"
                        },
                        new
                        {
                            Id = 156,
                            IsoAlfa2Code = "NC",
                            IsoAlfa3Code = "NCL",
                            IsoNumericCode = 540,
                            Name = "New Caledonia"
                        },
                        new
                        {
                            Id = 157,
                            IsoAlfa2Code = "VU",
                            IsoAlfa3Code = "VUT",
                            IsoNumericCode = 548,
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 158,
                            IsoAlfa2Code = "NZ",
                            IsoAlfa3Code = "NZL",
                            IsoNumericCode = 554,
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 159,
                            IsoAlfa2Code = "NI",
                            IsoAlfa3Code = "NIC",
                            IsoNumericCode = 558,
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 160,
                            IsoAlfa2Code = "NE",
                            IsoAlfa3Code = "NER",
                            IsoNumericCode = 562,
                            Name = "Niger (the)"
                        },
                        new
                        {
                            Id = 161,
                            IsoAlfa2Code = "NG",
                            IsoAlfa3Code = "NGA",
                            IsoNumericCode = 566,
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 162,
                            IsoAlfa2Code = "NU",
                            IsoAlfa3Code = "NIU",
                            IsoNumericCode = 570,
                            Name = "Niue"
                        },
                        new
                        {
                            Id = 163,
                            IsoAlfa2Code = "NF",
                            IsoAlfa3Code = "NFK",
                            IsoNumericCode = 574,
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            Id = 164,
                            IsoAlfa2Code = "NO",
                            IsoAlfa3Code = "NOR",
                            IsoNumericCode = 578,
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 165,
                            IsoAlfa2Code = "MP",
                            IsoAlfa3Code = "MNP",
                            IsoNumericCode = 580,
                            Name = "Northern Mariana Islands (the)"
                        },
                        new
                        {
                            Id = 166,
                            IsoAlfa2Code = "UM",
                            IsoAlfa3Code = "UMI",
                            IsoNumericCode = 581,
                            Name = "United States Minor Outlying Islands (the)"
                        },
                        new
                        {
                            Id = 167,
                            IsoAlfa2Code = "FM",
                            IsoAlfa3Code = "FSM",
                            IsoNumericCode = 583,
                            Name = "Micronesia (Federated States of)"
                        },
                        new
                        {
                            Id = 168,
                            IsoAlfa2Code = "MH",
                            IsoAlfa3Code = "MHL",
                            IsoNumericCode = 584,
                            Name = "Marshall Islands (the)"
                        },
                        new
                        {
                            Id = 169,
                            IsoAlfa2Code = "PW",
                            IsoAlfa3Code = "PLW",
                            IsoNumericCode = 585,
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 170,
                            IsoAlfa2Code = "PK",
                            IsoAlfa3Code = "PAK",
                            IsoNumericCode = 586,
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 171,
                            IsoAlfa2Code = "PA",
                            IsoAlfa3Code = "PAN",
                            IsoNumericCode = 591,
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 172,
                            IsoAlfa2Code = "PG",
                            IsoAlfa3Code = "PNG",
                            IsoNumericCode = 598,
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = 173,
                            IsoAlfa2Code = "PY",
                            IsoAlfa3Code = "PRY",
                            IsoNumericCode = 600,
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 174,
                            IsoAlfa2Code = "PE",
                            IsoAlfa3Code = "PER",
                            IsoNumericCode = 604,
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 175,
                            IsoAlfa2Code = "PH",
                            IsoAlfa3Code = "PHL",
                            IsoNumericCode = 608,
                            Name = "Philippines (the)"
                        },
                        new
                        {
                            Id = 176,
                            IsoAlfa2Code = "PN",
                            IsoAlfa3Code = "PCN",
                            IsoNumericCode = 612,
                            Name = "Pitcairn"
                        },
                        new
                        {
                            Id = 177,
                            IsoAlfa2Code = "PL",
                            IsoAlfa3Code = "POL",
                            IsoNumericCode = 616,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 178,
                            IsoAlfa2Code = "PT",
                            IsoAlfa3Code = "PRT",
                            IsoNumericCode = 620,
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 179,
                            IsoAlfa2Code = "GW",
                            IsoAlfa3Code = "GNB",
                            IsoNumericCode = 624,
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 180,
                            IsoAlfa2Code = "TL",
                            IsoAlfa3Code = "TLS",
                            IsoNumericCode = 626,
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = 181,
                            IsoAlfa2Code = "PR",
                            IsoAlfa3Code = "PRI",
                            IsoNumericCode = 630,
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 182,
                            IsoAlfa2Code = "QA",
                            IsoAlfa3Code = "QAT",
                            IsoNumericCode = 634,
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 183,
                            IsoAlfa2Code = "RE",
                            IsoAlfa3Code = "REU",
                            IsoNumericCode = 638,
                            Name = "Réunion"
                        },
                        new
                        {
                            Id = 184,
                            IsoAlfa2Code = "RO",
                            IsoAlfa3Code = "ROU",
                            IsoNumericCode = 642,
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 185,
                            IsoAlfa2Code = "RU",
                            IsoAlfa3Code = "RUS",
                            IsoNumericCode = 643,
                            Name = "Russian Federation (the)"
                        },
                        new
                        {
                            Id = 186,
                            IsoAlfa2Code = "RW",
                            IsoAlfa3Code = "RWA",
                            IsoNumericCode = 646,
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 187,
                            IsoAlfa2Code = "BL",
                            IsoAlfa3Code = "BLM",
                            IsoNumericCode = 652,
                            Name = "Saint Barthélemy"
                        },
                        new
                        {
                            Id = 188,
                            IsoAlfa2Code = "SH",
                            IsoAlfa3Code = "SHN",
                            IsoNumericCode = 654,
                            Name = "Saint Helena, Ascension and Tristan da Cunha"
                        },
                        new
                        {
                            Id = 189,
                            IsoAlfa2Code = "KN",
                            IsoAlfa3Code = "KNA",
                            IsoNumericCode = 659,
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = 190,
                            IsoAlfa2Code = "AI",
                            IsoAlfa3Code = "AIA",
                            IsoNumericCode = 660,
                            Name = "Anguilla"
                        },
                        new
                        {
                            Id = 191,
                            IsoAlfa2Code = "LC",
                            IsoAlfa3Code = "LCA",
                            IsoNumericCode = 662,
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 192,
                            IsoAlfa2Code = "MF",
                            IsoAlfa3Code = "MAF",
                            IsoNumericCode = 663,
                            Name = "Saint Martin (French part)"
                        },
                        new
                        {
                            Id = 193,
                            IsoAlfa2Code = "PM",
                            IsoAlfa3Code = "SPM",
                            IsoNumericCode = 666,
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Id = 194,
                            IsoAlfa2Code = "VC",
                            IsoAlfa3Code = "VCT",
                            IsoNumericCode = 670,
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = 195,
                            IsoAlfa2Code = "SM",
                            IsoAlfa3Code = "SMR",
                            IsoNumericCode = 674,
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 196,
                            IsoAlfa2Code = "ST",
                            IsoAlfa3Code = "STP",
                            IsoNumericCode = 678,
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = 197,
                            IsoAlfa2Code = "SA",
                            IsoAlfa3Code = "SAU",
                            IsoNumericCode = 682,
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 198,
                            IsoAlfa2Code = "SN",
                            IsoAlfa3Code = "SEN",
                            IsoNumericCode = 686,
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 199,
                            IsoAlfa2Code = "RS",
                            IsoAlfa3Code = "SRB",
                            IsoNumericCode = 688,
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 200,
                            IsoAlfa2Code = "SC",
                            IsoAlfa3Code = "SYC",
                            IsoNumericCode = 690,
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 201,
                            IsoAlfa2Code = "SL",
                            IsoAlfa3Code = "SLE",
                            IsoNumericCode = 694,
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 202,
                            IsoAlfa2Code = "SG",
                            IsoAlfa3Code = "SGP",
                            IsoNumericCode = 702,
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 203,
                            IsoAlfa2Code = "SK",
                            IsoAlfa3Code = "SVK",
                            IsoNumericCode = 703,
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 204,
                            IsoAlfa2Code = "VN",
                            IsoAlfa3Code = "VNM",
                            IsoNumericCode = 704,
                            Name = "Viet Nam"
                        },
                        new
                        {
                            Id = 205,
                            IsoAlfa2Code = "SI",
                            IsoAlfa3Code = "SVN",
                            IsoNumericCode = 705,
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 206,
                            IsoAlfa2Code = "SO",
                            IsoAlfa3Code = "SOM",
                            IsoNumericCode = 706,
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 207,
                            IsoAlfa2Code = "ZA",
                            IsoAlfa3Code = "ZAF",
                            IsoNumericCode = 710,
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 208,
                            IsoAlfa2Code = "ZW",
                            IsoAlfa3Code = "ZWE",
                            IsoNumericCode = 716,
                            Name = "Zimbabwe"
                        },
                        new
                        {
                            Id = 209,
                            IsoAlfa2Code = "ES",
                            IsoAlfa3Code = "ESP",
                            IsoNumericCode = 724,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 210,
                            IsoAlfa2Code = "SS",
                            IsoAlfa3Code = "SSD",
                            IsoNumericCode = 728,
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = 211,
                            IsoAlfa2Code = "SD",
                            IsoAlfa3Code = "SDN",
                            IsoNumericCode = 729,
                            Name = "Sudan (the)"
                        },
                        new
                        {
                            Id = 212,
                            IsoAlfa2Code = "EH",
                            IsoAlfa3Code = "ESH",
                            IsoNumericCode = 732,
                            Name = "Western Sahara*"
                        },
                        new
                        {
                            Id = 213,
                            IsoAlfa2Code = "SR",
                            IsoAlfa3Code = "SUR",
                            IsoNumericCode = 740,
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 214,
                            IsoAlfa2Code = "SJ",
                            IsoAlfa3Code = "SJM",
                            IsoNumericCode = 744,
                            Name = "Svalbard and Jan Mayen"
                        },
                        new
                        {
                            Id = 215,
                            IsoAlfa2Code = "SZ",
                            IsoAlfa3Code = "SWZ",
                            IsoNumericCode = 748,
                            Name = "Eswatini"
                        },
                        new
                        {
                            Id = 216,
                            IsoAlfa2Code = "SE",
                            IsoAlfa3Code = "SWE",
                            IsoNumericCode = 752,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 217,
                            IsoAlfa2Code = "CH",
                            IsoAlfa3Code = "CHE",
                            IsoNumericCode = 756,
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 218,
                            IsoAlfa2Code = "SY",
                            IsoAlfa3Code = "SYR",
                            IsoNumericCode = 760,
                            Name = "Syrian Arab Republic (the)"
                        },
                        new
                        {
                            Id = 219,
                            IsoAlfa2Code = "TJ",
                            IsoAlfa3Code = "TJK",
                            IsoNumericCode = 762,
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = 220,
                            IsoAlfa2Code = "TH",
                            IsoAlfa3Code = "THA",
                            IsoNumericCode = 764,
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 221,
                            IsoAlfa2Code = "TG",
                            IsoAlfa3Code = "TGO",
                            IsoNumericCode = 768,
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 222,
                            IsoAlfa2Code = "TK",
                            IsoAlfa3Code = "TKL",
                            IsoNumericCode = 772,
                            Name = "Tokelau"
                        },
                        new
                        {
                            Id = 223,
                            IsoAlfa2Code = "TO",
                            IsoAlfa3Code = "TON",
                            IsoNumericCode = 776,
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 224,
                            IsoAlfa2Code = "TT",
                            IsoAlfa3Code = "TTO",
                            IsoNumericCode = 780,
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 225,
                            IsoAlfa2Code = "AE",
                            IsoAlfa3Code = "ARE",
                            IsoNumericCode = 784,
                            Name = "United Arab Emirates (the)"
                        },
                        new
                        {
                            Id = 226,
                            IsoAlfa2Code = "TN",
                            IsoAlfa3Code = "TUN",
                            IsoNumericCode = 788,
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 227,
                            IsoAlfa2Code = "TR",
                            IsoAlfa3Code = "TUR",
                            IsoNumericCode = 792,
                            Name = "Türkiye"
                        },
                        new
                        {
                            Id = 228,
                            IsoAlfa2Code = "TM",
                            IsoAlfa3Code = "TKM",
                            IsoNumericCode = 795,
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 229,
                            IsoAlfa2Code = "TC",
                            IsoAlfa3Code = "TCA",
                            IsoNumericCode = 796,
                            Name = "Turks and Caicos Islands (the)"
                        },
                        new
                        {
                            Id = 230,
                            IsoAlfa2Code = "TV",
                            IsoAlfa3Code = "TUV",
                            IsoNumericCode = 798,
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 231,
                            IsoAlfa2Code = "UG",
                            IsoAlfa3Code = "UGA",
                            IsoNumericCode = 800,
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 232,
                            IsoAlfa2Code = "UA",
                            IsoAlfa3Code = "UKR",
                            IsoNumericCode = 804,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 233,
                            IsoAlfa2Code = "MK",
                            IsoAlfa3Code = "MKD",
                            IsoNumericCode = 807,
                            Name = "North Macedonia"
                        },
                        new
                        {
                            Id = 234,
                            IsoAlfa2Code = "EG",
                            IsoAlfa3Code = "EGY",
                            IsoNumericCode = 818,
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 235,
                            IsoAlfa2Code = "GB",
                            IsoAlfa3Code = "GBR",
                            IsoNumericCode = 826,
                            Name = "United Kingdom of Great Britain and Northern Ireland (the)"
                        },
                        new
                        {
                            Id = 236,
                            IsoAlfa2Code = "GG",
                            IsoAlfa3Code = "GGY",
                            IsoNumericCode = 831,
                            Name = "Guernsey"
                        },
                        new
                        {
                            Id = 237,
                            IsoAlfa2Code = "JE",
                            IsoAlfa3Code = "JEY",
                            IsoNumericCode = 832,
                            Name = "Jersey"
                        },
                        new
                        {
                            Id = 238,
                            IsoAlfa2Code = "IM",
                            IsoAlfa3Code = "IMN",
                            IsoNumericCode = 833,
                            Name = "Isle of Man"
                        },
                        new
                        {
                            Id = 239,
                            IsoAlfa2Code = "TZ",
                            IsoAlfa3Code = "TZA",
                            IsoNumericCode = 834,
                            Name = "Tanzania, the United Republic of"
                        },
                        new
                        {
                            Id = 240,
                            IsoAlfa2Code = "US",
                            IsoAlfa3Code = "USA",
                            IsoNumericCode = 840,
                            Name = "United States of America (the)"
                        },
                        new
                        {
                            Id = 241,
                            IsoAlfa2Code = "VI",
                            IsoAlfa3Code = "VIR",
                            IsoNumericCode = 850,
                            Name = "Virgin Islands (U.S.)"
                        },
                        new
                        {
                            Id = 242,
                            IsoAlfa2Code = "BF",
                            IsoAlfa3Code = "BFA",
                            IsoNumericCode = 854,
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 243,
                            IsoAlfa2Code = "UY",
                            IsoAlfa3Code = "URY",
                            IsoNumericCode = 858,
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 244,
                            IsoAlfa2Code = "UZ",
                            IsoAlfa3Code = "UZB",
                            IsoNumericCode = 860,
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 245,
                            IsoAlfa2Code = "VE",
                            IsoAlfa3Code = "VEN",
                            IsoNumericCode = 862,
                            Name = "Venezuela (Bolivarian Republic of)"
                        },
                        new
                        {
                            Id = 246,
                            IsoAlfa2Code = "WF",
                            IsoAlfa3Code = "WLF",
                            IsoNumericCode = 876,
                            Name = "Wallis and Futuna"
                        },
                        new
                        {
                            Id = 247,
                            IsoAlfa2Code = "WS",
                            IsoAlfa3Code = "WSM",
                            IsoNumericCode = 882,
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 248,
                            IsoAlfa2Code = "YE",
                            IsoAlfa3Code = "YEM",
                            IsoNumericCode = 887,
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 249,
                            IsoAlfa2Code = "ZM",
                            IsoAlfa3Code = "ZMB",
                            IsoNumericCode = 894,
                            Name = "Zambia"
                        });
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMain")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Emails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailAddress = "admin@admin.com",
                            EmployeeId = 1
                        });
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "John",
                            IsActive = true,
                            JobTitleId = 1,
                            LastName = "Doe",
                            UserId = "c80cb755-6247-4474-aa26-43a41d78691a"
                        });
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("JobTitles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Manager"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Developer"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Consultant"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Accountant"
                        });
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsSubscriptionActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Postcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubscriptionContractNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CountryId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.PartnerContact", b =>
                {
                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("PartnerId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("PartnerContacts");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeteFinished")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.TicketFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.TicketParticipant", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketParticipants");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.TicketPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsTimeBillable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("PostingText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WorkedTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketPosts");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.TicketPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TicketPriorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Normal"
                        },
                        new
                        {
                            Id = 2,
                            Title = "High"
                        });
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TicketStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "In Progress"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Resolved"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Closed"
                        });
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Service Request"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Bug"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Change request"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c838fb22-a99a-42d7-9c00-9bae1b092cfd",
                            ConcurrencyStamp = "f9e60a57-35fe-4c1d-9122-792c058b3640",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "361c7033-86bb-42e0-a264-3f560e1da74d",
                            ConcurrencyStamp = "c989c208-9984-4602-9a99-e02ae068e4b4",
                            Name = "Support",
                            NormalizedName = "SUPPORT"
                        },
                        new
                        {
                            Id = "5b35eb07-6f63-41eb-8a44-5178055f3019",
                            ConcurrencyStamp = "bfad4afd-7c68-4d90-ad06-e3940554bf00",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c80cb755-6247-4474-aa26-43a41d78691a",
                            RoleId = "c838fb22-a99a-42d7-9c00-9bae1b092cfd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Contact", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.JobTitle", "JobTitle")
                        .WithMany("Contacts")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Contacts_JobTitles");

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Contacts_Users");

                    b.Navigation("JobTitle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Email", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.Contact", "Contact")
                        .WithMany("Emails")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Emails_Contacts");

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.Employee", "Employee")
                        .WithMany("Emails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Emails_Employees");

                    b.Navigation("Contact");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Employee", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.JobTitle", "JobTitle")
                        .WithMany("Employees")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Employees_JobTitles");

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Employees_Users");

                    b.Navigation("JobTitle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Partner", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.Employee", "Consultant")
                        .WithMany("Clients")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Partners_Consultants");

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.Country", "Country")
                        .WithMany("Partners")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Partners_Countries");

                    b.Navigation("Consultant");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.PartnerContact", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.Contact", "Contact")
                        .WithMany("PartnerContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PartnerContacts_Contacts");

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.Partner", "Partner")
                        .WithMany("PartnerContacts")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PartnerContacts_Partners");

                    b.Navigation("Contact");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.PhoneNumber", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.Contact", "Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_PhoneNumbers_Contacts");

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.Employee", "Employee")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_PhoneNumbers_Employees");

                    b.Navigation("Contact");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Ticket", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.Partner", "Partner")
                        .WithMany("Tickets")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Partners");

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.TicketPriority", "Priority")
                        .WithMany("Tickets")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Priorities");

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.TicketStatus", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Statuses");

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.TicketType", "Type")
                        .WithMany("Tickets")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Types");

                    b.Navigation("Partner");

                    b.Navigation("Priority");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.TicketFile", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.Ticket", "Ticket")
                        .WithMany("Files")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_TicketFiles_Tickets");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.TicketParticipant", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.Ticket", "Ticket")
                        .WithMany("Participants")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_TicketParticipants_Tickets");

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("TicketParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_TicketParticipants_Users");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.TicketPost", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.TicketStatus", "Status")
                        .WithMany("TicketPosts")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_TicketPosts_Statuses");

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.Ticket", "Ticket")
                        .WithMany("Posts")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_TicketPosts_Tickets");

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("TicketPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_TicketPosts_Users");

                    b.Navigation("Status");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CustomerSupportSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Employees");

                    b.Navigation("TicketParticipants");

                    b.Navigation("TicketPosts");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Contact", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("PartnerContacts");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Country", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Employee", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Emails");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.JobTitle", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Partner", b =>
                {
                    b.Navigation("PartnerContacts");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.Ticket", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Participants");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.TicketPriority", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.TicketStatus", b =>
                {
                    b.Navigation("TicketPosts");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CustomerSupportSystem.Infrastructure.Data.Models.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
